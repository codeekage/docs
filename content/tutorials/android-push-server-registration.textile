---
title: Android Push Notifications tutorial - Device registration via server
alt_title: Device registration via server
excerpt: Learn how to setup, send and receive Push Notifications on Android devices. This tutorial shows device registration with FCM via your server
section: tutorials
category: external-services
index: 17
platform: push-notifications
authors:
- author_name: Amit Surana
  author_bio: ""
  author_profile_url: https://github.com/amsurana
  author_image: "https://avatars1.githubusercontent.com/u/817920?s=460&v=4"
level: easy
reading_time: 20
languages:
  - android
  - nodejs
---

Ably can deliver native push notifications to devices using "Google’s Firebase Cloud Messaging":https://firebase.google.com/docs/cloud-messaging/ service. Native push notifications, unlike Ably’s "channel based pub/sub messaging":/realtime/channels, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery-efficient transport to receive push notifications. Therefore, native push notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery-efficient manner.

In this tutorial, we'll see how you can setup and send push notifications to Android your app using the "Ably Push Notification service":/general/push. You will also learn how to test this integration by sending notifications to an Android device.

Ably supports two types of client permissions for access to the Push Notification service:

* "@push-subscribe@":/general/push/activate-subscribe: A client with this permission is a push target device, and it can manage its registration and any subscription for itself. However, it won't be able to manage push registrations or channel subscriptions for any other device.
* "@push-admin@":/general/push/admin: A client with this permission has full access to the "Push admin API":https://www.ably.io/documentation/general/push/admin, and can manage registrations and subscriptions for all devices.

Read more about permissions (also called capabilities) in our "API documentation":/core-features/authentication#capabilities-explained.

By default, the Push Notification service provides the @AblyRealtime.push.activate@ method for the device to register itself with FCM directly, but you can instead delegate the device registration and subscription to your server. In this tutorial we will look at registration via server. You can jump to the "direct registration tutorial":/tutorials/ios-push-direct-registration if you'd rather have the device directly register itself with FCM.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#step2). Step 2 - Enabling Push in your Ably app

<%= partial 'shared/tutorials/_android_push_enable_permissions' %>

h2(#step3). Step 3 - Registering your app with FCM

<%= partial 'shared/tutorials/_android_push_fcm_register' %>

h2(#step4). Step 4 - Setting up a Node.js server for authentication

<%= partial 'shared/tutorials/_setup_node_push_auth' %>

h2(#step5). Step 5 - Using ngrok to make the server public

<%= partial 'shared/tutorials/_setup_ngrok' %>

h2(#step6). Step 6 - Adding the Google Services Gradle plugin

<%= partial 'shared/tutorials/_android_push_google_services' %>

h2(#step7). Step 7 - Adding the Ably client library to your Android project

<%= partial 'shared/tutorials/_android_push_library_setup' %>

h2(#step8). Step 8 - Adding device registration capability to the Node.js server and subscribing to the Push Notifications channel via server

<%= partial 'shared/tutorials/_android_push_server_registration' %>

h2(#step9). Step 9 - Sending device details to the server for registration

Next, you'll need to use @FirebaseInstanceIdService@ to generate the @registrationToken@ for the device, then send this token along with other identifiers like @deviceId@, @clientId@ etc to the server, in order for it to be able to register the device with FCM and subscribe it to the push channel using this info.

Go ahead and add two new folders in the same directory as your @MainActivity.java@ file, namely 'receivers' and 'server'. In the 'receivers' folder, add a new file and name it @AblyPushMessagingService.java@. In this file, we'll add code to show a Push Notification on the device when it receives one. Paste the following into this file:

```[java]
package YOUR-PACKAGE-NAME;

import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;

import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

public class AblyPushMessagingService extends FirebaseMessagingService {
    public static final String PUSH_NOTIFICATION_ACTION = AblyPushMessagingService.class.getName() + ".PUSH_NOTIFICATION_MESSAGE";

    @Override
    public void onMessageReceived(RemoteMessage message) {
        //FCM data is received here.

        Intent intent = new Intent(PUSH_NOTIFICATION_ACTION);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }


}
```

Next, go ahead and add this class as a service in your manifest fie. Open the @AndroidManifest.xml@ and paste the following after @<activity></activity>@ within the @<application></application@ tags.

```[xml]
<service android:name=".receivers.AblyPushMessagingService">
    <intent-filter>
        <action android:name="com.google.firebase.MESSAGING_EVENT" />
    </intent-filter>
</service>
```

Now, in your @MainActivity@ class, add the following below the @initAblyRuntime()@ function. In this function we send various device identifiers like @deviceId@, @clientId@ and @registrationToken@ to the server, so the device registration can be performed there.

```[java]
private BroadcastReceiver pushReceiver = new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
        if (ABLY_PUSH_ACTIVATE_ACTION.equalsIgnoreCase(intent.getAction())) {
            ErrorInfo error = IntentUtils.getErrorInfo(intent);
            if (error != null) {
                logMessage("Error activating push service: " + error);
                handler.sendMessage(handler.obtainMessage(FAILURE));
                return;
            }
            logMessage("Device is now registered for push");
            handler.sendMessage(handler.obtainMessage(SUCCESS, STEP_3));
            return;
        }

        if (AblyPushMessagingService.PUSH_NOTIFICATION_ACTION.equalsIgnoreCase(intent.getAction())) {
            logMessage("Received Push message");
        }
    }
};

private void initAblyPush() throws AblyException {
    LocalDevice device = ablyRealtime.push.getActivationContext().getLocalDevice();
    if (device.push.recipient == null) {
        logMessage("Push not initialized. Please check Firebase settings");
        return;
    }
    String registrationToken = device.push.recipient.get("registrationToken").getAsString();
    if (registrationToken == null || registrationToken.length() == 0) {
        logMessage("Registration token cannot be null. Please check Firebase settings");
        return;
    }
    String deviceId = device.id;
    String clientId = getClientId();

    ServerAPI.getInstance().api().register(deviceId, registrationToken, clientId).enqueue(new Callback<NetResponse>() {
        @Override
        public void onResponse(Call<NetResponse> call, Response<NetResponse> response) {
            logMessage("Successfully registered: " + new Gson().toJson(response.body()));
            handler.sendMessage(handler.obtainMessage(SUCCESS, STEP_3));
        }

        @Override
        public void onFailure(Call<NetResponse> call, Throwable t) {
            logMessage("Error registering with server: " + t.getMessage());
            handler.sendMessage(handler.obtainMessage(FAILURE));
        }
    });
}
```


In the 'server' folder that you created before, add a new file and name it @ServerAPI.java@. Here, we'll define the ServerAPI class that'll send a request to the server with the device registration info. Paste the following in the this file:

```[java]
package YOUR-PACKAGE-NAME;

import io.ably.lib.push.AblyFirebaseInstanceIdService;
/**
 * Leave this empty as the base class AblyFirebaseInstanceIdService does the FCM token registration.
 * In case your app requires access to FCM token as well, then override io.ably.lib.push.AblyFirebaseInstanceIdService#onTokenRefresh()
 */
public class AblyPushRegistrationService extends AblyFirebaseInstanceIdService {
    @Override
    public void onTokenRefresh() {
        //Make sure to call super.onTokenRefresh to initialize Ably push environment.
        super.onTokenRefresh();
    }
}
```

Next, in the same folder, that is 'server', add a new file and name it @AblyPushMessagingService.java@ and paste the following into it.

```[java]
package YOUR-PACKAGE-NAME;

import io.ably.tutorial.push_tutorial_two.BuildConfig;
import retrofit2.Call;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.GET;
import retrofit2.http.Query;

public class ServerAPI {
    public interface API {
        @GET("/register")
        Call<NetResponse> register(@Query("deviceId") String deviceId, @Query("registrationToken") String registrationToken, @Query("clientId") String clientId);
    }


    private static ServerAPI instance;

    public static ServerAPI getInstance() {
        if (instance == null) {
            instance = new ServerAPI();
        }
        return instance;
    }

    private final API api;

    private ServerAPI() {
        Retrofit.Builder builder = new Retrofit.Builder();
        builder.baseUrl(BuildConfig.ABLY_URL);
        builder.addConverterFactory(GsonConverterFactory.create());

        Retrofit retrofit = builder.build();
        api = retrofit.create(API.class);
    }

    public API api() {
        return api;
    }
}
```

This makes use of the @NetResponse@ class. Let's go ahead and define this next, in the same file, i.e, 'server'. Create a new file named @NetResponse.java@ and paste the following into it:


```[java]
package YOUR-PACKAGE-NAME;

import io.ably.lib.rest.DeviceDetails;

public class NetResponse {
    public String id;
    public String platform;
    public String formFactor;
    public String clientId;
    DeviceDetails.Push push;
}

```

This class defines the data objects required to be sent to the server.

h2(#step10). Step 10 - Testing the app

<%= partial 'shared/tutorials/_testing_push_android' %>

h2(#further-reading). Further Reading

* Ably's "Push Notifications documentation":/general/push and info on "channels":/core-features/channels may be useful.

* "FCM documentation":https://firebase.google.com/docs/cloud-messaging/ is a good place to find more information on the use of Push Notifications in Android.

* You may also wish to deregister devices or get all of the stats related to your application implementing Push Notifications, such as the number and type of device registrations, etc. More information on how to do this can be found in the "Push Admin API docs":/general/push/admin.